name: r68s-openwrt-ci

on:
  workflow_dispatch:
    inputs:
      upload_release:
        description: "是否更新到release"
        required: true
        default: false
        type: boolean

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  DEVICE: r68s
  CONFIG_FILE: r68s.config.buildinfo
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:

  build_openwrt:

    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest  # 运行所需要的虚拟机环境

    steps:

      - name: 签出本仓库
        uses: actions/checkout@v2
        with:
          ref: main     # 仓库分支

      - name: 检查必要文件
        run: |
          [ -e $DEVICE/$CONFIG_FILE ]
          [ -e $DEVICE/$DIY_P1_SH ]
          [ -e $DEVICE/$DIY_P2_SH ]

      - name: 对ubuntu清理空间和安装依赖软件
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "$TZ"

          df -h
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y install libfuse-dev
          sudo -E apt-get clean
          df -h

      - name: Clone lede openwrt 源码
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: 加载配置文件
        run: |
          cp $DEVICE/$CONFIG_FILE $GITHUB_WORKSPACE/openwrt/.config
          ls -al
          chmod +x $DEVICE/$DIY_P2_SH
          cd openwrt
          bash $GITHUB_WORKSPACE/$DEVICE/$DIY_P2_SH
          ls -al package
          make defconfig

      - name: Make download
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV

      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f -name "*.img.gz") ./artifact/firmware/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

#      - name: Deliver targets
#        uses: actions/upload-artifact@v2
#        with:
#          name: OpenWrt_targets_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
#          path: ./openwrt/bin/targets/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ./openwrt/artifact/buildinfo/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ./openwrt/bin/targets/

      - name: Release
        if: inputs.upload_release == true && !cancelled()
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.FILE_DATE }}
          tag_name: ${{ env.FILE_DATE }}
          body: 电犀牛R68S
          files: ./openwrt/artifact/firmware/*.img.gz

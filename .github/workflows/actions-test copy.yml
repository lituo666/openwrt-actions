# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: openwrt-ci-test

on: 
  workflow_dispatch:
    inputs:
      openwrt_x64:
        description: "是否编译x64"
        required: true
        default: true
        type: boolean
      openwrt_r68s:
        description: "是否编译r68s"
        required: true
        default: false
        type: boolean
      openwrt_r66s:
        description: "是否编译r66s"
        required: true
        default: false
        type: boolean
      openwrt_n1:
        description: "是否编译n1"
        required: true
        default: false
        type: boolean
      upload_release:
        description: "是否更新到release"
        required: true
        default: false
        type: boolean

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  KERNEL_VERSION: 5.15.67-flippy-76+o # 打包时的内核版本
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  TZ: Asia/Shanghai

jobs:
  job1:
    name: 生成 matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      start_date: ${{ steps.set-matrix.outputs.start_date }}
      form_str: ${{ steps.set-matrix.outputs.form_str }}
    steps:
    - name: 处理需要编译的设备
      id: set-matrix
      run: |
        if [ "${{ inputs.openwrt_x64 }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"x64\"}";fi
        if [ "${{ inputs.openwrt_r68s }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"r68s\"}";fi
        if [ "${{ inputs.openwrt_r66s }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"r66s\"}";fi
        if [ "${{ inputs.openwrt_n1 }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"n1\"}";fi
        form_str=${form_str: 1}
        echo "form_str=$form_str"
        echo "::set-output name=matrix::{\"include\":[${form_str}]}"
        echo "::set-output name=start_date::$(date +"%Y%m%d%H%M%S")"
        echo "::set-output name=form_str::$form_str"
        
  build_openwrt:
    name: Build OpenWrt firmware
    needs: job1
    permissions:
      contents: write # for release creation
  
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.job1.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main     # 仓库分支名字

      - name: 检查必要文件
        run: |
          echo "检查必要文件"
          [ -e ${{ matrix.PLATFORM }}/${{ matrix.PLATFORM }}.config.buildinfo ]
          [ -e ${{ matrix.PLATFORM }}/$DIY_P1_SH ]
          [ -e ${{ matrix.PLATFORM }}/$DIY_P2_SH ]
          if [ "${{ matrix.PLATFORM }}" == "n1" ];then
          [ -e ${{ matrix.PLATFORM }}/boot-$KERNEL_VERSION.tar.gz ]
          [ -e ${{ matrix.PLATFORM }}/dtb-amlogic-$KERNEL_VERSION.tar.gz ]
          [ -e ${{ matrix.PLATFORM }}/header-$KERNEL_VERSION.tar.gz ]
          [ -e ${{ matrix.PLATFORM }}/modules-$KERNEL_VERSION.tar.gz ]
          fi

      - name: 清理ubuntu空间
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "$TZ"

          df -h
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

      - name: Clone lede 源码
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: Update feeds
        run: |
          cd openwrt && ./scripts/feeds update -a
          
      - name: Install feeds
        run: |
          cd openwrt && ./scripts/feeds install -a

      - name: 运行自定义配置
        run: |
          cp ${{ matrix.PLATFORM }}/${{ matrix.PLATFORM }}.config.buildinfo $GITHUB_WORKSPACE/openwrt/.config
          ls -al
          chmod +x ${{ matrix.PLATFORM }}/$DIY_P2_SH
          cd openwrt
          bash $GITHUB_WORKSPACE/${{ matrix.PLATFORM }}/$DIY_P2_SH
          ls -al package
          make defconfig

      - name: Make download
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/rootfs
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/buildinfo
          if [ "${{ matrix.PLATFORM }}" == "n1" ]; then
          rm -rf $(find ./bin/targets/ -type f -name "openwrt-armvirt-64-Image*")
          cp -rf $(find ./bin/targets/ -type f -name "*rootfs.tar.gz") ./artifact/rootfs
          else
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          fi
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/


      - name: 打包 (n1)
        if: matrix.PLATFORM == 'n1'
        run: |
          sudo mkdir -p /opt/kernel
          sudo cp $GITHUB_WORKSPACE/${{ matrix.PLATFORM }}/*.tar.gz /opt/kernel
          cd /opt
          sudo git clone https://github.com/unifreq/openwrt_packit
          sudo cp $GITHUB_WORKSPACE/openwrt/artifact/rootfs/*rootfs.tar.gz openwrt_packit
          cd openwrt_packit
          sudo echo "WHOAMI=lituo" >> whoami
          sudo echo "KERNEL_VERSION=$KERNEL_VERSION" >> whoami
          sudo bash ./mk_s905d_n1.sh
          cd output
          sudo gzip *.img
          sudo cp -rf *.gz $GITHUB_WORKSPACE/openwrt/artifact/firmware/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo_${{ matrix.PLATFORM }}
          path: ./openwrt/artifact/buildinfo/

      - name: Deliver rootfs (n1)
        if: matrix.PLATFORM == 'n1'
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_rootfs_${{ matrix.PLATFORM }}
          path: ./openwrt/artifact/rootfs

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware_${{ matrix.PLATFORM }}
          path: ./openwrt/artifact/firmware/

      - name: Release
        if: inputs.upload_release == 'true' && !cancelled()
        uses: softprops/action-gh-release@v1
        with:
          name: ${{needs.job1.outputs.start_date}}
          tag_name: ${{needs.job1.outputs.start_date}}
          body: ${{needs.job1.outputs.form_str}} 
          files: ./openwrt/artifact/firmware/*.img.gz

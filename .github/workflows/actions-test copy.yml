# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: openwrt-ci-test

on: 
  workflow_dispatch:
    inputs:
      openwrt_x64:
        description: "是否编译x64"
        required: true
        default: true
        type: boolean
      openwrt_r68s:
        description: "是否编译r68s"
        required: true
        default: false
        type: boolean
      openwrt_r66s:
        description: "是否编译r66s"
        required: true
        default: false
        type: boolean
      openwrt_n1:
        description: "是否编译n1"
        required: true
        default: false
        type: boolean
      upload_release:
        description: "是否更新到release"
        required: true
        default: false
        type: boolean

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  KERNEL_VERSION: 5.15.67-flippy-76+o # 打包时的内核版本
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  TZ: Asia/Shanghai

jobs:
  job1:
    name: 生成 matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: 处理需要编译的设备
      id: set-matrix
      run: |
        if [ "${{ inputs.openwrt_x64 }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"x64\"}";fi
        if [ "${{ inputs.openwrt_r68s }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"r68s\"}";fi
        if [ "${{ inputs.openwrt_r66s }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"r66s\"}";fi
        if [ "${{ inputs.openwrt_n1 }}" == "true" ];then form_str="$form_str,{\"PLATFORM\":\"n1\"}";fi
        form_str=${form_str: 1}
        echo "form_str=$form_str"
        echo "::set-output name=matrix::{\"include\":[${form_str}]}"
        
  build_openwrt:
    name: Build OpenWrt firmware
    needs: job1
    permissions:
      contents: write # for release creation
  
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.job1.outputs.matrix)}}
    steps:
      - name: dddd
        run: |
          echo "PLATFORM:${{ matrix.PLATFORM }}"
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main     # 仓库分支名字

      - name: 检查必要文件
        run: |
          echo "检查必要文件"
          [ -e ${{ matrix.PLATFORM }}/${{ matrix.PLATFORM }}.config.buildinfo ]
          [ -e ${{ matrix.PLATFORM }}/$DIY_P1_SH ]
          [ -e ${{ matrix.PLATFORM }}/$DIY_P2_SH ]
          if [ "${{ matrix.PLATFORM }}" == "n1" ];then
          [ -e ${{ matrix.PLATFORM }}/boot-$KERNEL_VERSION.tar.gz ]
          [ -e ${{ matrix.PLATFORM }}/dtb-amlogic-$KERNEL_VERSION.tar.gz ]
          [ -e ${{ matrix.PLATFORM }}/header-$KERNEL_VERSION.tar.gz ]
          [ -e ${{ matrix.PLATFORM }}/modules-$KERNEL_VERSION.tar.gz ]
          fi

      - name: 清理ubuntu空间
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "清理空间"

      - name: Clone lede 源码
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: Update feeds
        run: |
          cd openwrt && ./scripts/feeds update -a
          
      - name: Install feeds
        run: |
          cd openwrt && ./scripts/feeds install -a

      - name: 运行自定义配置
        run: |
          cp ${{ matrix.PLATFORM }}/${{ matrix.PLATFORM }}.config.buildinfo $GITHUB_WORKSPACE/openwrt/.config
          ls -al
          chmod +x ${{ matrix.PLATFORM }}/$DIY_P2_SH
          cd openwrt
          bash $GITHUB_WORKSPACE/${{ matrix.PLATFORM }}/$DIY_P2_SH
          ls -al package
          make defconfig

      - name: Make download
        run: |
          echo "Make download"

      - name: Compile firmware
        run: |
          echo "Compile firmware"

      - name: Prepare artifact
        run: |
          echo "Prepare artifact"

      - name: 打包
        if: matrix.PLATFORM == 'n1'
        run: |
          echo "打包"

      - name: Upload release asset
        if: inputs.upload_release == 'true' && !cancelled()
        run: |
          echo "Upload release asset"
